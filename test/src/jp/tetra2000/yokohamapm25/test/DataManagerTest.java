package jp.tetra2000.yokohamapm25.test;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Date;
import java.util.TimeZone;

import jp.tetra2000.yokohamapm25.DataManager;
import jp.tetra2000.yokohamapm25.ExInteger;

import android.test.AndroidTestCase;

public class DataManagerTest extends AndroidTestCase {
	private static final String TEMP_FILE_NAME = "file";
	private File mTempFile;
	private DataManager mDataManager;
	
	private static final String[] DATA = {
		"日時,1時,2時,3時,4時,5時,6時,7時,8時,9時,10時,11時,12時,13時,14時,15時,16時,17時,18時,19時,20時,21時,22時,23時,24時,日平均,有効時間",
		"2013/01/01,15,14,17,20,18,12,21,18,26,22,5,3,2,6,3,7,9,11,17,11,15,13,6,8,12.5,24",
		"2013/01/02,11,11,11,7,14,18,15,20,13,14,21,22,26,25,25,24,21,24,28,25,23,23,24,20,19.4,24",
		"2013/01/03,16,13,13,13,17,19,20,9,6,-5,4,-4,8,8,7,2,4,5,2,3,5,5,2,4,7.3,24",
		"2013/01/04,2,3,3,1,2,-1,1,2,-2,-4,1,-2,4,-2,0,3,11,7,5,4,2,8,8,3,2.5,24",
		"2013/01/05,0,3,2,3,3,4,-2,1,1,1,2,-1,3,7,13,14,17,20,18,28,21,24,27,19,9.5,24",
		"2013/01/06,19,18,14,16,18,20,16,18,18,18,14,9,7,8,8,11,10,21,25,4,12,8,6,4,13.4,24",
		"2013/01/07,6,13,4,6,7,11,3,9,8,5,9,7,10,10,19,23,25,36,37,43,50,42,32,24,18.3,24",
		"2013/01/08,23,30,30,24,22,20,20,25,23,24,25,20,*,*,16,18,35,35,36,34,27,30,27,26,25.9,22",
		"2013/01/09,29,25,20,19,17,20,20,28,24,16,14,15,22,23,31,23,32,34,45,37,36,34,32,36,26.3,24",
		"2013/01/10,32,38,34,11,6,5,9,7,4,1,3,1,3,6,15,15,12,18,19,4,6,7,10,5,11.3,24",
		"2013/01/11,5,4,7,12,8,9,10,12,7,9,1,10,5,8,11,8,17,23,25,28,28,17,17,12,12.2,24",
		"2013/01/12,12,14,18,12,15,13,12,18,20,16,19,25,9,8,9,14,19,39,43,36,38,47,46,51,23.0,24",
		"2013/01/13,51,49,40,33,24,17,21,20,24,16,30,15,13,23,20,23,28,41,48,50,48,54,37,25,31.3,24",
		"2013/01/14,23,27,42,28,35,30,23,27,21,15,9,2,1,-3,0,5,6,9,5,2,9,4,6,6,13.8,24",
		"2013/01/15,4,9,9,5,3,5,2,7,6,11,7,8,5,11,8,16,9,12,8,5,11,9,10,7,7.8,24",
		"2013/01/16,10,13,4,6,7,6,*,*,*,11,11,*,*,9,9,20,15,15,20,27,39,40,37,26,17.1,19",
		"2013/01/17,18,18,24,19,26,26,27,40,35,32,25,16,8,13,13,15,14,12,9,11,6,7,6,9,17.9,24",
		"2013/01/18,9,7,-1,4,8,5,7,6,2,-1,0,0,2,1,-1,8,5,10,14,13,12,12,17,18,6.5,24",
		"2013/01/19,18,13,16,11,12,8,4,-50,*,*,*,*,*,*,*,*,*,20,25,40,34,22,28,17,14.5,15",
		"2013/01/20,10,16,12,15,15,12,12,14,14,6,4,0,9,12,16,9,9,7,9,5,10,2,8,5,9.6,24",
		"2013/01/21,6,5,9,5,9,9,13,14,14,17,6,8,12,10,11,12,10,17,15,19,30,30,14,18,13.0,24",
		"2013/01/22,25,30,32,32,33,31,36,35,29,36,34,38,46,47,54,39,33,35,18,3,4,-2,3,1,28.0,24",
		"2013/01/23,1,2,-1,4,6,6,0,4,4,4,3,2,3,*,8,10,6,6,7,10,8,7,5,5,4.8,23",
		"2013/01/24,6,4,8,6,9,8,10,14,15,14,11,9,11,6,11,6,8,9,7,13,8,10,11,16,9.6,24",
		"2013/01/25,17,19,27,23,25,24,23,27,30,35,27,16,8,7,5,7,7,2,5,7,8,7,2,1,15.0,24",
		"2013/01/26,0,2,2,2,1,4,8,4,7,8,3,2,1,4,5,4,2,5,5,3,5,11,8,4,4.2,24",
		"2013/01/27,5,4,3,1,3,3,4,-1,2,0,0,-1,1,2,2,7,8,7,7,9,9,6,10,4,4.0,24",
		"2013/01/28,5,7,4,9,6,8,9,10,13,16,11,4,5,0,6,5,5,10,5,10,10,12,9,15,8.1,24",
		"2013/01/29,12,9,3,26,8,26,23,9,13,7,5,8,8,3,7,11,13,13,17,14,1,11,12,9,11.2,24",
		"2013/01/30,13,16,16,17,15,15,17,18,16,11,24,10,7,*,5,11,13,14,13,13,13,10,15,18,13.9,23",
		"2013/01/31,15,15,18,18,17,17,20,25,25,20,20,17,18,13,15,20,20,23,27,31,31,37,37,29,22.0,24",
		"2013/02/01,26,29,26,23,24,26,21,27,32,31,34,30,20,10,20,24,15,15,29,27,28,17,6,8,22.8,24",
		"2013/02/02,9,11,8,5,1,-1,2,5,9,5,10,7,12,11,11,6,14,12,12,26,9,14,7,4,8.7,24",
		"2013/02/03,-1,-2,2,4,1,1,4,8,1,1,3,3,5,10,7,12,8,5,8,12,8,14,9,14,5.7,24",
		"2013/02/04,17,8,15,10,9,10,14,20,17,17,20,9,11,5,7,4,7,5,28,31,20,30,31,32,15.7,24",
		"2013/02/05,31,16,1,5,6,12,15,8,12,9,8,11,10,16,16,18,22,15,20,18,17,20,17,12,14.0,24",
		"2013/02/06,15,5,4,7,5,10,10,7,6,6,4,1,2,1,0,3,0,9,10,14,18,18,23,16,8.1,24",
		"2013/02/07,21,16,15,22,21,24,23,21,22,25,30,22,10,12,14,15,17,16,20,20,36,38,31,30,21.7,24",
		"2013/02/08,32,32,11,6,3,2,3,6,2,4,4,6,6,*,5,6,4,7,4,7,4,7,2,2,7.2,23",
		"2013/02/09,7,3,5,8,3,4,6,6,6,7,3,5,6,7,11,11,10,17,22,4,8,8,9,7,7.6,24",
		"2013/02/10,9,10,5,11,4,7,9,6,4,9,6,10,15,25,21,18,22,17,22,32,35,32,29,29,16.1,24",
		"2013/02/11,29,19,18,21,21,25,21,30,25,13,17,13,17,16,12,16,14,17,17,14,20,13,24,18,18.8,24",
		"2013/02/12,15,16,11,15,7,17,14,14,7,13,13,20,20,22,22,31,-,-,-,-,-,-,-,-,16.1,16"

	};
	
	@Override
	public void setUp() {
		try {			
			mTempFile = File.createTempFile(TEMP_FILE_NAME, null);
			mTempFile.deleteOnExit();
			
			FileWriter fr = new FileWriter(mTempFile);
			
			for(String line : DATA) {
				fr.write(line);
				fr.write("\n");
			}
			
			fr.close();
		} catch (IOException e) {
			fail();
		}
		
		mDataManager = new DataManager(mTempFile);
	}
	
	public void testTempFile() {
		try {
			FileReader fr = new FileReader(mTempFile);
			BufferedReader br = new BufferedReader(fr);
			
			int len = DATA.length;
			for(int i=0; i<len; i++) {
				if(!(br.readLine().equals(DATA[i]))) {
					br.close();
					fail();
				}
			}
			br.close();
		} catch (FileNotFoundException e) {
			fail();
		} catch (IOException e) {
			fail();
		}
	}
	
	public void testHasData() {
		assertTrue(mDataManager.hasData());
	}
	
	public void testGetLatestTime() {
		int time = mDataManager.getLatestTime();
		assertEquals(time, 16);
	}
	
	public void testGetLatestDay() {
		TimeZone timeZone = TimeZone.getTimeZone("GMT+9:00");
		TimeZone.setDefault(timeZone);
		Date day = new Date(2013-1900, 2-1, 12); // 2013年2月12日
		assertEquals(day, mDataManager.getToday());
	}
	
	public void testGetLatestValue() {
		ExInteger value = new ExInteger("31");
		ExInteger returnedValue = mDataManager.getLatestValue();
		assertTrue(value.equals(returnedValue));
	}
}
